[tool.poetry]
name = "ai-legal-policy-assistant"
version = "0.1.0"
description = "AI-powered research assistant for legal and policy documents"
authors = ["Ovi Sofariu <osofariu@gmail.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.13"
# Core framework
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}

# LLM and AI frameworks
langchain = "^0.3.0"
langchain-openai = "^0.2.0"
langchain-anthropic = "^0.2.0"
langchain-community = "^0.3.0"
langchain-experimental = "^0.3.0"
langchain-ollama = "^0.3.3"
langgraph = "^0.2.20"

# Document processing
pypdf = "^3.0.1"
beautifulsoup4 = "^4.12.2"
requests = "^2.31.0"
aiohttp = "^3.9.0"
python-multipart = "^0.0.6"

# Vector databases and retrieval
faiss-cpu = "^1.7.4"
chromadb = "^0.4.15"

# Data processing
pandas = "^2.1.0"
numpy = "^1.24.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"

# Async and utilities
tenacity = "^8.2.3"
python-dotenv = "^1.0.0"

# Logging and monitoring
structlog = "^23.2.0"
psutil = "^5.9.0"

# Output formats
jinja2 = "^3.1.2"
markdown = "^3.5.1"

# AWS integrations
boto3 = "^1.29.0"
botocore = "^1.32.0"

# Security
cryptography = "^41.0.0"
aiosqlite = "^0.21.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
httpx = "^0.27.0"  # Updated for langchain-ollama compatibility

# Code quality
ruff = "^0.1.0"
mypy = "^1.7.0"
pre-commit = "^3.5.0"

# Development utilities
ipython = "^8.17.0"
jupyter = "^1.0.0"

[tool.poetry.scripts]
lepola = "src.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration
[tool.ruff]
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]
line-length = 88
indent-width = 4
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "LOG", # flake8-logging
]

ignore = [
    "E501",  # line too long, handled by formatter
    "S101",  # use of assert
    "S104",  # possible binding to all interfaces
    "T201",  # print found (for development)
    "B008",  # do not perform function calls in argument defaults
]

fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pypdf.*",
    "faiss.*",
    "chromadb.*",
    "langchain.*",
    "langchain_openai.*",
    "langchain_anthropic.*",
    "langchain_community.*",
    "langchain_experimental.*",
    "langgraph.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
]
markers = [
    "asyncio: mark test as async",
    "integration: mark test as integration test",
    "slow: mark test as slow running",
]
filterwarnings = [
    "ignore::DeprecationWarning:httpx.*",
    "ignore::pydantic.warnings.PydanticDeprecatedSince20",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "src/__init__.py",
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
] 